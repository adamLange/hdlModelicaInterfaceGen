#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#include <math.h>

#define MAXDATASIZE 100
#define EVENT_QUEUE_MAX_DEPTH {{event_queue_max_depth}}


extern void ModelicaError(char* message);
extern void ModelicaMessage(const char *message);
extern void ModelicaFormatMessage(const char *message,...);

void send_n_bytes(void *obj,void* data,int num_bytes);
void recv_n_bytes(void *ref, void* buf, int num_bytes);

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

typedef struct{
  int sockfd;
  //double eventTime[EVENT_QUEUE_MAX_DEPTH];
  {%for i in outputPorts%}
  {{i.output_struct_member}}
  {%endfor%}
  //double modelicaTimeUpdateCalled;
  int eventIndex;
  int numEvents;
} ConnectionObject;

void* initConnectionObject(char *port){
    ConnectionObject* obj = malloc(sizeof(ConnectionObject));
    if (obj == NULL) ModelicaError("Failed to allocate memory for ConnectionObject");
    int sockfd, numbytes;  
    char buf[MAXDATASIZE];
    struct addrinfo hints, *servinfo, *p;
    int rv;
    char s[INET6_ADDRSTRLEN];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;

    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and connect to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("client: socket");
            continue;
        }

        if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            perror("client: connect");
            close(sockfd);
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "client: failed to connect\n");
        return 2;
    }

    inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr),
            s, sizeof s);
    printf("client: connecting to %s\n", s);

    freeaddrinfo(servinfo); // all done with this structure

    obj->sockfd = sockfd;

    return (void*) obj;
};

void destroyConnectionObject(void* obj){
  ConnectionObject* con = (ConnectionObject*) obj;
  close(con->sockfd);
  free(con);
};

void update(void* ref, double time,
               {% for i in inputPorts %}
               {{i.input_update_argument}},
               {%endfor%}
               double *nextAcquisitionDeltaT,
               double *eventDeltaT
               )
{
  {%if debug%}
  ModelicaMessage("update start\n\0");
  {%endif%}
  ConnectionObject *obj = (ConnectionObject*)ref;

  // send sensor values to controller
  ///////////////////////////////////
  {%if debug%}
  ModelicaMessage("send sensor values to controller\n\0");
  {%endif%}

{% for i in inputPorts%}
{{i.send_c}}
{% endfor%}

  // recv time values from controller
  ///////////////////////////////////
  {%if debug%}
  ModelicaMessage("recv time values from controller\n\0");
  {%endif%}

  int32_t time_buf[EVENT_QUEUE_MAX_DEPTH+1];
  recv_n_bytes(obj,(char*)time_buf,(EVENT_QUEUE_MAX_DEPTH+1)*4);

  *nextAcquisitionDeltaT = ((uint32_t)(ntohl(time_buf[0]))) * 1e-9;
  {%if debug%}
  ModelicaFormatMessage("nextAcquisitionDeltaT: %f\n",*nextAcquisitionDeltaT);
  {%endif%}

  for (int i = 1; i <= EVENT_QUEUE_MAX_DEPTH; i++){
    //obj->eventTime[i] = (uint32_t)(ntohl(time_buf[i])) * 1e-9;
    eventDeltaT[i] = (uint32_t)(ntohl(time_buf[i])) * 1e-9;
  }

  // recv event values from controller
  ////////////////////////////////////
  {%if debug%}
  ModelicaMessage("recv event values from controller\n\0");
  {%endif%}

{% for i in outputPorts %}
{{i.recv_c}}
{% endfor %}

  return;
};

void getNextEventValues(void* ref,
                        {% for i in outputPorts %}
                        {{i.getNextEventValues_argument}}{%if not loop.last%},{%endif%}

                        {% endfor %}
                                    )
{
  //ModelicaMessage("getNextPwmValue starting");
  ConnectionObject *obj = (ConnectionObject*)ref;
  //ModelicaFormatMessage("  eventIndex: %d",obj->eventIndex);

  {%for i in outputPorts %}
  {{i.getNextEventValues_assignment}}
  {%endfor%}

  obj->eventIndex ++;
  if (obj->eventIndex >= obj->numEvents){
    ModelicaError("Event queue overflow!\n");
  }

};


void send_n_bytes(void *ref,void* data,int num_bytes){
  ConnectionObject *obj = (ConnectionObject*)ref;
  char *sendPtr;
  sendPtr = (char*)data;
  int bytesSent, bytesToSend;
  bytesToSend = num_bytes;
  while ( bytesToSend >= 1){
    bytesSent = send(obj->sockfd,sendPtr,bytesToSend,0);
    if (bytesSent == -1) perror("error at focUpdate send");
    sendPtr += bytesSent;
    bytesToSend -= bytesSent;
  }
}

void recv_n_bytes(void *ref, void* buf, int num_bytes){
  ConnectionObject *obj = (ConnectionObject*)ref;
  {%if debug%}
  ModelicaFormatMessage("recn_n_bytes invoked with %d bytes to recv\n",num_bytes);
  {%endif%}
  char* recvPtr;
  recvPtr = (char*)buf;
  int bytesToRecv, bytesRecvd;
  bytesToRecv = num_bytes;
  while (bytesToRecv >= 1){
    {%if debug%}
    ModelicaFormatMessage("  bytes to recv: %d\n",bytesToRecv);
    {%endif%}
    bytesRecvd = recv(obj->sockfd,recvPtr,bytesToRecv,0);
    {%if debug%}
    ModelicaFormatMessage("  bytes recvd: %d\n",bytesRecvd);
    {%endif%}
    if (bytesRecvd == -1) perror("error at focUpdate recv");
    recvPtr += bytesRecvd;
    bytesToRecv -= bytesRecvd;
  }
}
