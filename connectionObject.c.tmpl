#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <errno.h>
#include <string.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>

#include <arpa/inet.h>

#include <math.h>

#define MAXDATASIZE 100
#define EVENT_QUEUE_MAX_DEPTH {{event_queue_max_depth}}


extern void ModelicaError(char* message);
extern void ModelicaMessage(const char *message);
extern void ModelicaFormatMessage(const char *message,...);

// get sockaddr, IPv4 or IPv6:
void *get_in_addr(struct sockaddr *sa)
{
    if (sa->sa_family == AF_INET) {
        return &(((struct sockaddr_in*)sa)->sin_addr);
    }

    return &(((struct sockaddr_in6*)sa)->sin6_addr);
}

typedef struct{
  int sockfd;
  double eventTime[EVENT_QUEUE_MAX_DEPTH];
  {%for i in outputPorts%}
  {{i.output_struct_member}}
  {%endfor%}
  double modelicaTimeUpdateCalled;
  int eventIndex;
  int numEvents;
} ConnectionObject;

void* initConnectionObject(char *port){
    ConnectionObject* obj = malloc(sizeof(ConnectionObject));
    if (obj == NULL) ModelicaError("Failed to allocate memory for ConnectionObject");
    int sockfd, numbytes;  
    char buf[MAXDATASIZE];
    struct addrinfo hints, *servinfo, *p;
    int rv;
    char s[INET6_ADDRSTRLEN];

    memset(&hints, 0, sizeof hints);
    hints.ai_family = AF_UNSPEC;
    hints.ai_socktype = SOCK_STREAM;
    hints.ai_flags = AI_PASSIVE;

    if ((rv = getaddrinfo(NULL, port, &hints, &servinfo)) != 0) {
        fprintf(stderr, "getaddrinfo: %s\n", gai_strerror(rv));
        return 1;
    }

    // loop through all the results and connect to the first we can
    for(p = servinfo; p != NULL; p = p->ai_next) {
        if ((sockfd = socket(p->ai_family, p->ai_socktype,
                p->ai_protocol)) == -1) {
            perror("client: socket");
            continue;
        }

        if (connect(sockfd, p->ai_addr, p->ai_addrlen) == -1) {
            perror("client: connect");
            close(sockfd);
            continue;
        }

        break;
    }

    if (p == NULL) {
        fprintf(stderr, "client: failed to connect\n");
        return 2;
    }

    inet_ntop(p->ai_family, get_in_addr((struct sockaddr *)p->ai_addr),
            s, sizeof s);
    printf("client: connecting to %s\n", s);

    freeaddrinfo(servinfo); // all done with this structure

    obj->sockfd = sockfd;

    return (void*) obj;
};

void destroyConnectionObject(void* obj){
  ConnectionObject* con = (ConnectionObject*) obj;
  close(con->sockfd);
  free(con);
};

typedef struct {
  {%for i in inputPorts%}
  {{i.input_struct_member}}
  {%endfor%}
} dataToCtl;

typedef struct {
  uint32_t nextAcquisitionDeltaT; // ns
  uint32_t eventDeltaT[EVENT_QUEUE_MAX_DEPTH]; //ns
  {% for i in outputPorts %}
  {{i.output_struct_member}}
  {% endfor %}
} dataFromCtl;


void update(void* ref, double time,
               {% for i in inputPorts %}
               {{i.input_update_argument}},
               {%endfor%}
               double *nextCurrentAcquisitionDeltaT,
               double *pwmDeltaT
               )
{
  //ModelicaMessage("update start\n\0");
  ConnectionObject *obj = (ConnectionObject*)ref;
  dataToCtl sensorData;

  obj->modelicaTimeUpdateCalled = time;

  {% for i in inputPorts%}
  {{i.digitization_code_snippet}}
  {% endfor%}

  char* sendPtr;
  sendPtr = (char*)&sensorData;
  int bytesSent, bytesToSend;
  bytesToSend = sizeof(dataToCtl);
  //ModelicaMessage("send while loop:\n\0");
  while (bytesToSend >= 1){
    //ModelicaFormatMessage("    %d bytesToSend\n\0",bytesToSend);
    bytesSent = send(obj->sockfd,sendPtr,bytesToSend,0);
    if (bytesSent == -1) perror("error at focUpdate send");
    sendPtr += bytesSent;
    bytesToSend -= bytesSent;
  }

  dataFromCtl cmdData;
  char* recvPtr;
  recvPtr = (char*)&cmdData;
  int bytesToRecv, bytesRecvd;
  bytesToRecv = sizeof(dataFromCtl);
  //ModelicaMessage("recv while loop:\n\0");
  while (bytesToRecv >= 1){
    //ModelicaFormatMessage("    %d bytesToRecv\n\0",bytesToRecv);
    bytesRecvd = recv(obj->sockfd,recvPtr,bytesToRecv,0);
    if (bytesRecvd == -1) perror("error at focUpdate recv");
    recvPtr += bytesRecvd;
    bytesToRecv -= bytesRecvd;
  }

  *nextCurrentAcquisitionDeltaT = ntohl(cmdData.nextAcquisitionDeltaT) * 1e-9;
  //ModelicaFormatMessage("%f",*nextCurrentAcquisitionDeltaT);

  obj->eventIndex = 0;
  obj->numEvents = EVENT_QUEUE_MAX_DEPTH;
  //ModelicaMessage("Received events:");
  for (int i = 0; i < EVENT_QUEUE_MAX_DEPTH ; i++){
    pwmDeltaT[i] = (uint32_t)(ntohl(cmdData.pwmDeltaT[i])) * 1e-9;
    obj->pwm[i] = cmdData.pwmNext[i];
    obj->eventTime[i] = (uint32_t)(ntohl(cmdData.pwmDeltaT[i])) * 1e-9;

  }

  return;
};

void getNextEventValues(void* ref,
                        {% for i in outputPorts %}
                        {{i.getNextEventValues_argument}}{%if not loop.last%},{%endif%}

                        {% endfor %}
                                    )
{
  //ModelicaMessage("getNextPwmValue starting");
  ConnectionObject *obj = (ConnectionObject*)ref;
  //ModelicaFormatMessage("  eventIndex: %d",obj->eventIndex);

  {%for i in outputPorts %}
  {{i.getNextEventValues_assignment}}
  {%endfor%}

  obj->eventIndex ++;
  if (obj->eventIndex >= obj->numEvents){
    ModelicaError("Event queue overflow!\n");
  }

};
