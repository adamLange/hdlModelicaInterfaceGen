import cocotb
from cocotb.triggers import Timer, Edge, RisingEdge, FallingEdge, Join
from cocotb.utils import get_sim_time
import socket
from JennyCocotbUtils import AxisStream, ClockDriver, StreamSinkFile, AxiLiteMaster
import json
from math import ceil
import struct

inputDict = {{json_string}}

class ModelInterface:

    def __init__(self,dut,port={{port}}):

        # create a listening socket that modelica will connect to
        listener = socket.socket()
        listener.bind(("localhost",port))
        listener.listen()
        print("MotorModelInterface waiting for connection on {}".format(port))
        sock,addr_tup = listener.accept()
        self.listener = listener
        self.sock = sock

        self.dut = dut

        #self.inputDict = json(loads(jsonString))
        self.inputDict = inputDict

        #self.events = []
        self.deltaT = []

        #instantiate input port objects
        self.inputPorts = []
        for i in self.inputDict["modelica_interface_block_inputs"]:
          if i["type"] == "Real":
            self.inputPorts.append(RealPort(self,i))
          else:
            raise Warning("unsupported input type: {}".format(i["type"]))

        #instantiate output port objects
        self.outputPorts = []
        for i in self.inputDict["modelica_interface_block_outputs"]:
          if i["type"] == "Boolean":
            self.outputPorts.append(BooleanPort(self,i))
          else:
            raise Warning("unsupported output type: {}".format(i["type"]))

    @cocotb.coroutine
    def coupler(self):

        # start thread to monitor output events
        eventListenerThread = cocotb.fork(self.eventListener())

        self.previousAcqTime = 0
        while True:

            # receive incoming signal data from model
            print("receiving signals...")
            for i in self.inputPorts:
              i.recv()

            # run the controller until a new signal acquisition is requested by the controller 
            print("waiting for rising edge of acquisition trigger...")
            yield RisingEdge(self.dut.trigger)
            self.nextAcqTime = int(get_sim_time("ns"))
            acqDeltaT = self.nextAcqTime - self.previousAcqTime
            print("  trigger fired at {} ns".format(self.nextAcqTime))
            print("  acqDeltaT:{}".format(acqDeltaT))

            # write out output events and time of the next signal acquisition event

            #for event in self.events:
            #    outputValues.append(event.newValue)

            # pad with negative deltaT events
            print("padding with negative deltaT events...")
            numEvents = len(self.deltaT)
            if numEvents > {{event_queue_max_depth}}:
                raise Warning("event queue overflow!")
            print("  before padding, deltaT = {}".format(self.deltaT))
            for i in range({{event_queue_max_depth}}-numEvents):
                self.deltaT.append(int(-123))
            print("  after padding, deltaT = {}".format(self.deltaT))

            bmsg  = struct.pack(">i{{event_queue_max_depth}}i",
                                acqDeltaT,
                                *self.deltaT
                               )
            print("sending {} bytes of time info".format(len(bmsg)))
            self.sock.send(bmsg)
            self.deltaT = []

            print("sending event data of each port...")
            for i in self.outputPorts:
              i.sendEventData()

            self.previousAcqTime = self.nextAcqTime

    @cocotb.coroutine
    def eventListener(self):
        while True:
            print("eventListener waiting for rising edge of eventTrigger..")
            yield RisingEdge(self.dut.eventTrigger)
            print("eventListener triggered")
            tCapture = int(get_sim_time("ns"))
            self.deltaT.append(tCapture - self.previousAcqTime)
            for i in self.outputPorts:
                i.capture()

    def getPortByName(self,name):
      ports = []
      ports.extend(self.inputPorts)
      ports.extend(self.outputPorts)
      for i in ports:
        if i.name == name:
          return i
      return None

def defaultCallback(portObj):
  print("Warning: port {} uses default callback".format(portObj.name))

class Port:

    def __init__(self,interfaceObject,d):
        self.interfaceObject = interfaceObject
        self.queueDepth = {{event_queue_max_depth}}
        self.name = d["name"]
        self.width = d["width"]

class BooleanPort(Port):

    def __init__(self,interfaceObject,d):
        super().__init__(interfaceObject,d)
        self.numChar = ceil(self.width / 8)
        self.signal = eval("self.interfaceObject.dut.{}".format(d["name"]))
        self.events = []

    def capture(self):
        print("BooleanPort.capture called")
        try:
            value = self.signal.value.integer
        except:
            print("failed to retrieve pwm value, using 0b000 instead")
            value = 0

        for i in range(self.numChar):
          c = (value >> 8*i) & 0xFF
          self.events.append(bytes([c]))

    def sendEventData(self):
        z = ((self.numChar*(self.queueDepth-len(self.events)))*[bytes([0])])
        print(self.events)
        self.events.extend(z)
        print(self.events)
        packString = ">{}c".format(self.queueDepth*self.numChar)
        print("pack string:{}".format(packString))
        print("BooleanPort.sendEventData sending:{}".format(self.events))
        msg = struct.pack(packString,*self.events)
        print("length={}".format(len(msg)))
        self.interfaceObject.sock.send(msg)
        self.events = []

class RealPort(Port):

    def __init__(self,interfaceObject,d):
        super().__init__(interfaceObject,d)
        self.callback = defaultCallback

    def recv(self):
        raw = self.interfaceObject.sock.recv(self.width*4)
        self.y = struct.unpack(">{}i".format(self.width),raw)
        print("RealPort.recv received: {}".format(self.y))
        print("length = {} bytes".format(len(raw)))
        self.callback(self)
